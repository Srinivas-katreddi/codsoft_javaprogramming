import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Timer;
import java.util.TimerTask;

public class QuizGameGUI extends JFrame {
    private static final String[] questions = {
        "What is the capital of France?",
        "Which planet is known as the Red Planet?",
        "Who wrote 'Romeo and Juliet'?",
        "What is the largest ocean on Earth?",
        "What is the boiling point of water?"
    };

    private static final String[][] options = {
        {"Berlin", "Madrid", "Paris", "Rome"},
        {"Earth", "Mars", "Jupiter", "Saturn"},
        {"Charles Dickens", "J.K. Rowling", "William Shakespeare", "Mark Twain"},
        {"Atlantic", "Indian", "Arctic", "Pacific"},
        {"90째C", "100째C", "110째C", "120째C"}
    };

    private static final int[] correctAnswers = {2, 1, 2, 3, 1};  // Correct options (index)
    
    private int score = 0;
    private int currentQuestionIndex = 0;
    private int selectedAnswer = -1;
    private Timer timer;
    private JLabel questionLabel, scoreLabel, timerLabel;
    private JRadioButton[] optionButtons;
    private ButtonGroup optionGroup;

    public QuizGameGUI() {
        setTitle("Quiz Game");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        JPanel questionPanel = new JPanel();
        questionPanel.setLayout(new GridLayout(6, 1));
        questionLabel = new JLabel("Question");
        questionPanel.add(questionLabel);

        optionButtons = new JRadioButton[4];
        optionGroup = new ButtonGroup();

        for (int i = 0; i < optionButtons.length; i++) {
            optionButtons[i] = new JRadioButton();
            optionGroup.add(optionButtons[i]);
            questionPanel.add(optionButtons[i]);
        }

        add(questionPanel, BorderLayout.CENTER);

        JPanel bottomPanel = new JPanel();
        bottomPanel.setLayout(new BorderLayout());

        scoreLabel = new JLabel("Score: 0");
        bottomPanel.add(scoreLabel, BorderLayout.WEST);

        timerLabel = new JLabel("Time left: 10s");
        bottomPanel.add(timerLabel, BorderLayout.EAST);

        JButton submitButton = new JButton("Submit");
        bottomPanel.add(submitButton, BorderLayout.SOUTH);

        add(bottomPanel, BorderLayout.SOUTH);

        submitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                submitAnswer();
            }
        });

        displayQuestion();
        startTimer();
    }

    private void displayQuestion() {
        if (currentQuestionIndex < questions.length) {
            questionLabel.setText("Q" + (currentQuestionIndex + 1) + ": " + questions[currentQuestionIndex]);
            for (int i = 0; i < options[currentQuestionIndex].length; i++) {
                optionButtons[i].setText(options[currentQuestionIndex][i]);
            }
            optionGroup.clearSelection();
        } else {
            showResults();
        }
    }

    private void submitAnswer() {
        for (int i = 0; i < optionButtons.length; i++) {
            if (optionButtons[i].isSelected()) {
                selectedAnswer = i;
                break;
            }
        }

        if (selectedAnswer == correctAnswers[currentQuestionIndex]) {
            score++;
            scoreLabel.setText("Score: " + score);
        }

        currentQuestionIndex++;
        timer.cancel();
        displayQuestion();
        startTimer();
    }

    private void startTimer() {
        timer = new Timer();
        TimerTask task = new TimerTask() {
            int timeRemaining = 30;

            @Override
            public void run() {
                if (timeRemaining > 0) {
                    timerLabel.setText("Time left: " + timeRemaining + "s");
                    timeRemaining--;
                } else {
                    timer.cancel();
                    submitAnswer();  
                }
            }
        };
        timer.scheduleAtFixedRate(task, 0, 1000);
    }

    private void showResults() {
        JOptionPane.showMessageDialog(this, "Quiz Over! Your final score is: " + score);
        System.exit(0);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new QuizGameGUI().setVisible(true);
            }
        });
    }
}
